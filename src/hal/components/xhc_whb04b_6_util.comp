component xhc_whb04b_6_util "xhc-whb04b-6 convenience utility";
description """Provides logic for a start/pause button and an interface
to halui.program.is_paused,is_idle,is_running to generate outputs for
halui.program.pause,resume,run.

Includes 4 simple lowpass filters with coef and scale pins.  The coef value should
be 0 <= coef <=1, smaller coef values slow response.  Note: the xhc_whb04b_6
component includes smoothing so these values can usually be left at 1.0
""";

pin in bit      start_or_pause;
pin in bit      is_paused;
pin in bit      is_idle;
pin in bit      is_running;
pin out bit     pause;
pin out bit     resume;
pin out bit     run;

// integer low pass filters (see ilowpass.comp)
pin in s32      in0;
pin in s32      in1;
pin in s32      in2;
pin in s32      in3;
pin in s32      in4;
pin in s32      in5;
pin out s32     out0;
pin out s32     out1;
pin out s32     out2;
pin out s32     out3;
pin out s32     out4;
pin out s32     out5;
pin in float    scale0 = 1.0;
pin in float    scale1 = 1.0;
pin in float    scale2 = 1.0;
pin in float    scale3 = 1.0;
pin in float    scale4 = 1.0;
pin in float    scale5 = 1.0;
pin in float    coef0 = 1.0;
pin in float    coef1 = 1.0;
pin in float    coef2 = 1.0;
pin in float    coef3 = 1.0;
pin in float    coef4 = 1.0;
pin in float    coef5 = 1.0;

variable hal_float_t value0 = 0.0;
variable hal_float_t value1 = 0.0;
variable hal_float_t value2 = 0.0;
variable hal_float_t value3 = 0.0;
variable hal_float_t value4 = 0.0;
variable hal_float_t value5 = 0.0;
variable hal_bit_t old_start_or_pause = false;

function _;
license "GPL";
;;
#include <rtapi_math.h>

FUNCTION(_)
{
    // protect so that 0 <= coef <= 1
    value0 += (in0 - value0) * (fabs(coef0) < 1 ? fabs(coef0) : 1);
    value1 += (in1 - value1) * (fabs(coef1) < 1 ? fabs(coef1) : 1);
    value2 += (in2 - value2) * (fabs(coef2) < 1 ? fabs(coef2) : 1);
    value3 += (in3 - value3) * (fabs(coef3) < 1 ? fabs(coef3) : 1);
    value4 += (in4 - value4) * (fabs(coef4) < 1 ? fabs(coef4) : 1);
    value5 += (in5 - value5) * (fabs(coef5) < 1 ? fabs(coef5) : 1);

    out0 =  ceil(value0 - 0.5) * scale0;
    out1 =  ceil(value1 - 0.5) * scale1;
    out2 =  ceil(value2 - 0.5) * scale2;
    out3 =  ceil(value3 - 0.5) * scale3;
    out4 =  ceil(value4 - 0.5) * scale4;
    out5 =  ceil(value5 - 0.5) * scale5;

    if (old_start_or_pause == start_or_pause)
        return;
    old_start_or_pause = start_or_pause;
    if (!start_or_pause)
        {
        pause = run = resume = 0;
        return;
        }
    if (is_paused)  {pause = 0; run = 0; resume = 1; }
    if (is_running) {pause = 1; run = 0; resume = 0; }
    if (is_idle)    {pause = 0; run = 1; resume = 0; }

    return;
}
